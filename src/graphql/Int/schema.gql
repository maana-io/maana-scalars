type Query {
  # Identity
  intIdentity(x: Int!): Int!
  intIdentityOpt(x: Int): Int

  # NONULL coercion
  intCoerceFromOpt(x: Int): Int!
  intCoerceToOpt(x: Int!): Int

  # Float coercion
  intFromFloat(x: Float!): Int!

  # String de/serialization
  intParse(x: String!): Int!
  intToString(x: Int!): String!

  # Lists
  intListUnion(a: [Int!]!, b: [Int!]!): [Int!]!
  intListConcat(a: [Int!]!, b: [Int!]!): [Int!]!
  intListReverse(x: [Int!]!): [Int!]!
  intListUnique(x: [Int!]!): [Int!]!
  intListFilterNulls(x: [Int]): [Int!]!
  intListsAdd(x: [Int!]!, y: [Int!]): [Int!]!

  # Operations
  intIsEqual(a: Int!, b: Int!): Boolean!
  intIsGreaterThan(x: Int!, min: Int!): Boolean!
  intIsGreaterThanOrEqualTo(x: Int!, min: Int!): Boolean!
  intIsLessThan(x: Int!, max: Int!): Boolean!
  intIsLessThanOrEqualTo(x: Int!, max: Int!): Boolean!
  intIsBetweenInclusive(x: Int!, min: Int!, max: Int!): Boolean!
  intIsBetweenExclusive(x: Int!, min: Int!, max: Int!): Boolean!

  # Constants
  intZero: Int!
  intOne: Int!
  intTwo: Int!
  intThree: Int!
  intFour: Int!
  intFive: Int!
  intSix: Int!
  intSeven: Int!
  intEight: Int!
  intNine: Int!
  intTen: Int!

  # Default value resolution
  intValueOrDefault(value: Int, defaultValue: Int!): Int!
}
