type Query {
  # Identity
  floatIdentity(x: Float!): Float!
  floatIdentityOpt(x: Float): Float

  # NONULL coercion
  floatCoerceFromOpt(x: Float): Float!
  floatCoerceToOpt(x: Float!): Float

  # INT coercion
  floatFromInt(x: Int!): Float!

  # String de/serialization
  floatParse(x: String!): Float!
  floatToString(x: Float!): String!

  # Lists
  floatListUnion(a: [Float!]!, b: [Float!]!): [Float!]!
  floatListConcat(a: [Float!]!, b: [Float!]!): [Float!]!
  floatListReverse(x: [Float!]!): [Float!]!
  floatListUnique(x: [Float!]!): [Float!]!
  floatListFilterNulls(x: [Float]): [Float!]!
  floatListsAdd(x: [Float!]!, y: [Float!]!): [Float!]!

  # Operations
  floatIsEqual(a: Float!, b: Float!): Boolean!
  floatIsGreaterThan(x: Float!, min: Float!): Boolean!
  floatIsGreaterThanOrEqualTo(x: Float!, min: Float!): Boolean!
  floatIsLessThan(x: Float!, max: Float!): Boolean!
  floatIsLessThanOrEqualTo(x: Float!, max: Float!): Boolean!
  floatIsBetweenInclusive(x: Float!, min: Float!, max: Float!): Boolean!
  floatIsBetweenExclusive(x: Float!, min: Float!, max: Float!): Boolean!

  # Constants
  floatZero: Float!
  floatOne: Float!
  floatOneHalf: Float!
  floatOneQuarter: Float!
  floatOneEigth: Float!
  floatOneSixteenth: Float!
  floatOneThirtySecond: Float!
  floatOneSixtyFourth: Float!
  floatTwo: Float!
  floatThree: Float!
  floatFour: Float!
  floatFive: Float!
  floatSix: Float!
  floatSeven: Float!
  floatEight: Float!
  floatNine: Float!
  floatTen: Float!

  # Mathematical constants
  floatPi: Float!
  floatE: Float!

  # Default value resolution
  floatValueOrDefault(value: Float, defaultValue: Float!): Float!
}
